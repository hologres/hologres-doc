# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Hologres
# This file is distributed under the same license as the Hologres package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version:  Hologres\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-08 11:59-0700\n"
"PO-Revision-Date: 2020-05-15 17:08+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/sql_manual/ddl/schema/createschema.md:1
msgid "CREATE SCHEMA"
msgstr "CREATE SCHEMA"

#: ../../source/sql_manual/ddl/schema/createschema.md:3
msgid ""
"In PostgreSQL, a database can contain multiple schemas, and public schema"
" is the default configuration. Each user can use a database with his/her "
"own schema, without interfering with each other, and it is also easy for "
"administrators to maintain the database."
msgstr ""
"在PostgreSQL中，一个数据库可以包含多个schema，使得多个用户使用一个数据库而不会互相干扰，也便于管理员管理，其中public "
"schema是默认配置。"

#: ../../source/sql_manual/ddl/schema/createschema.md:5
msgid ""
"When a new schema is added to the Hologres, the storage structure of a "
"table will be changed from database.table to database.schema.table. Each "
"table belongs to a schema, and a database can have multiple schemas. "
"Different schema can have the same object (table name, data type, etc.)."
msgstr "Hologres新增schema功能之后，表的存储结构从database.table改变为database.schema.table。每一张表归属于一个schema，一个Database可以有多个schema。不同的shcema下可以有相同的对象（表名、数据类型等）。"

#: ../../source/sql_manual/ddl/schema/createschema.md:7
msgid ""
"currently, Hologres supports create/alter/rename schema, and create table"
" for a schema. Drop schema is not supported by now."
msgstr ""
"Hologres当前版本主要支持create schema，alter scheam rename以及在schema的建表功能。暂时不支持 "
"drop scheam。"

#: ../../source/sql_manual/ddl/schema/createschema.md:9
#, fuzzy
msgid "Public Schema"
msgstr "public schema"

#: ../../source/sql_manual/ddl/schema/createschema.md:11
msgid ""
"Every database has a default schema, which is a public schema. And the "
"tables created will be stored in the public schema by default."
msgstr "每一个数据库的默认schema都是public schema，若不新建schema，在该数据库下建的表都会默认存储在public schema。"

#: ../../source/sql_manual/ddl/schema/createschema.md:13
msgid "to view the current schema is as following:"
msgstr "执行以下语句即可查看当前的schema："

#: ../../source/sql_manual/ddl/schema/createschema.md:21
#, fuzzy
msgid "Create Schema"
msgstr "新建schema"

#: ../../source/sql_manual/ddl/schema/createschema.md:23
msgid "Create a new schema in a database is as following:"
msgstr "若业务有特殊需求，可以在某个数据库下新建schema，示例SQL如下："

#: ../../source/sql_manual/ddl/schema/createschema.md:37
#, fuzzy
msgid "Create tables across Schema"
msgstr "跨schema建表"

#: ../../source/sql_manual/ddl/schema/createschema.md:39
msgid ""
"Hologres supports the operation of tables of not only current schema but "
"also other schemas by adding \"schema_name.\" in front of the table name."
" Example is as following:"
msgstr "Hologres还支持在当前schema下操作其他schema的表，只需在表名前面加上schema.table即可，示例如下："

#: ../../source/sql_manual/ddl/schema/createschema.md:41
msgid "1.Create a table for the public schema"
msgstr "1.在新的schema下为public schema建表"

#: ../../source/sql_manual/ddl/schema/createschema.md:49
msgid ""
"2.create table for schema my_schema in public schema, the example is as "
"following"
msgstr "2.在public schema下为新的schema建表"

#~ msgid "This section will introduce the usage of create schema in Hologres."
#~ msgstr "本小节将会为您介绍在交互式分析（Hologres）中create schema的用法。"

